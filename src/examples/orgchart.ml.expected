[@@@ocaml.warning "-27-30-39"]

type person = {
  name : string;
  age : int64;
}

type store = {
  address : string;
  employees : person list;
  clients : person list;
}

type company = {
  name : string;
  stores : store list;
  subsidiaries : company list;
}

let rec default_person 
  ?name:((name:string) = "")
  ?age:((age:int64) = 0L)
  () : person  = {
  name;
  age;
}

let rec default_store 
  ?address:((address:string) = "")
  ?employees:((employees:person list) = [])
  ?clients:((clients:person list) = [])
  () : store  = {
  address;
  employees;
  clients;
}

let rec default_company 
  ?name:((name:string) = "")
  ?stores:((stores:store list) = [])
  ?subsidiaries:((subsidiaries:company list) = [])
  () : company  = {
  name;
  stores;
  subsidiaries;
}

type person_mutable = {
  mutable name : string;
  mutable age : int64;
}

let default_person_mutable () : person_mutable = {
  name = "";
  age = 0L;
}

type store_mutable = {
  mutable address : string;
  mutable employees : person list;
  mutable clients : person list;
}

let default_store_mutable () : store_mutable = {
  address = "";
  employees = [];
  clients = [];
}

type company_mutable = {
  mutable name : string;
  mutable stores : store list;
  mutable subsidiaries : company list;
}

let default_company_mutable () : company_mutable = {
  name = "";
  stores = [];
  subsidiaries = [];
}

[@@@ocaml.warning "-27-30-39"]

(** {2 Formatters} *)

let rec pp_person fmt (v:person) = 
  let pp_i fmt () =
    Pbrt.Pp.pp_record_field ~first:true "name" Pbrt.Pp.pp_string fmt v.name;
    Pbrt.Pp.pp_record_field ~first:false "age" Pbrt.Pp.pp_int64 fmt v.age;
  in
  Pbrt.Pp.pp_brk pp_i fmt ()

let rec pp_store fmt (v:store) = 
  let pp_i fmt () =
    Pbrt.Pp.pp_record_field ~first:true "address" Pbrt.Pp.pp_string fmt v.address;
    Pbrt.Pp.pp_record_field ~first:false "employees" (Pbrt.Pp.pp_list pp_person) fmt v.employees;
    Pbrt.Pp.pp_record_field ~first:false "clients" (Pbrt.Pp.pp_list pp_person) fmt v.clients;
  in
  Pbrt.Pp.pp_brk pp_i fmt ()

let rec pp_company fmt (v:company) = 
  let pp_i fmt () =
    Pbrt.Pp.pp_record_field ~first:true "name" Pbrt.Pp.pp_string fmt v.name;
    Pbrt.Pp.pp_record_field ~first:false "stores" (Pbrt.Pp.pp_list pp_store) fmt v.stores;
    Pbrt.Pp.pp_record_field ~first:false "subsidiaries" (Pbrt.Pp.pp_list pp_company) fmt v.subsidiaries;
  in
  Pbrt.Pp.pp_brk pp_i fmt ()

[@@@ocaml.warning "-27-30-39"]

(** {2 Protobuf Encoding} *)

let rec encode_pb_person (v:person) encoder = 
  Pbrt.Encoder.string v.name encoder;
  Pbrt.Encoder.key 1 Pbrt.Bytes encoder; 
  Pbrt.Encoder.int64_as_zigzag v.age encoder;
  Pbrt.Encoder.key 2 Pbrt.Varint encoder; 
  ()

let rec encode_pb_store (v:store) encoder = 
  Pbrt.Encoder.string v.address encoder;
  Pbrt.Encoder.key 1 Pbrt.Bytes encoder; 
  Pbrt.List_util.rev_iter_with (fun x encoder -> 
    Pbrt.Encoder.nested encode_pb_person x encoder;
    Pbrt.Encoder.key 2 Pbrt.Bytes encoder; 
  ) v.employees encoder;
  Pbrt.List_util.rev_iter_with (fun x encoder -> 
    Pbrt.Encoder.nested encode_pb_person x encoder;
    Pbrt.Encoder.key 3 Pbrt.Bytes encoder; 
  ) v.clients encoder;
  ()

let rec encode_pb_company (v:company) encoder = 
  Pbrt.Encoder.string v.name encoder;
  Pbrt.Encoder.key 1 Pbrt.Bytes encoder; 
  Pbrt.List_util.rev_iter_with (fun x encoder -> 
    Pbrt.Encoder.nested encode_pb_store x encoder;
    Pbrt.Encoder.key 2 Pbrt.Bytes encoder; 
  ) v.stores encoder;
  Pbrt.List_util.rev_iter_with (fun x encoder -> 
    Pbrt.Encoder.nested encode_pb_company x encoder;
    Pbrt.Encoder.key 3 Pbrt.Bytes encoder; 
  ) v.subsidiaries encoder;
  ()

[@@@ocaml.warning "-27-30-39"]

(** {2 Protobuf Decoding} *)

let rec decode_pb_person d =
  let v = default_person_mutable () in
  let continue__= ref true in
  while !continue__ do
    match Pbrt.Decoder.key d with
    | None -> (
    ); continue__ := false
    | Some (1, Pbrt.Bytes) -> begin
      v.name <- Pbrt.Decoder.string d;
    end
    | Some (1, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(person), field(1)" pk
    | Some (2, Pbrt.Varint) -> begin
      v.age <- Pbrt.Decoder.int64_as_zigzag d;
    end
    | Some (2, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(person), field(2)" pk
    | Some (_, payload_kind) -> Pbrt.Decoder.skip d payload_kind
  done;
  ({
    name = v.name;
    age = v.age;
  } : person)

let rec decode_pb_store d =
  let v = default_store_mutable () in
  let continue__= ref true in
  while !continue__ do
    match Pbrt.Decoder.key d with
    | None -> (
      v.clients <- List.rev v.clients;
      v.employees <- List.rev v.employees;
    ); continue__ := false
    | Some (1, Pbrt.Bytes) -> begin
      v.address <- Pbrt.Decoder.string d;
    end
    | Some (1, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(store), field(1)" pk
    | Some (2, Pbrt.Bytes) -> begin
      v.employees <- (decode_pb_person (Pbrt.Decoder.nested d)) :: v.employees;
    end
    | Some (2, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(store), field(2)" pk
    | Some (3, Pbrt.Bytes) -> begin
      v.clients <- (decode_pb_person (Pbrt.Decoder.nested d)) :: v.clients;
    end
    | Some (3, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(store), field(3)" pk
    | Some (_, payload_kind) -> Pbrt.Decoder.skip d payload_kind
  done;
  ({
    address = v.address;
    employees = v.employees;
    clients = v.clients;
  } : store)

let rec decode_pb_company d =
  let v = default_company_mutable () in
  let continue__= ref true in
  while !continue__ do
    match Pbrt.Decoder.key d with
    | None -> (
      v.subsidiaries <- List.rev v.subsidiaries;
      v.stores <- List.rev v.stores;
    ); continue__ := false
    | Some (1, Pbrt.Bytes) -> begin
      v.name <- Pbrt.Decoder.string d;
    end
    | Some (1, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(company), field(1)" pk
    | Some (2, Pbrt.Bytes) -> begin
      v.stores <- (decode_pb_store (Pbrt.Decoder.nested d)) :: v.stores;
    end
    | Some (2, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(company), field(2)" pk
    | Some (3, Pbrt.Bytes) -> begin
      v.subsidiaries <- (decode_pb_company (Pbrt.Decoder.nested d)) :: v.subsidiaries;
    end
    | Some (3, pk) -> 
      Pbrt.Decoder.unexpected_payload "Message(company), field(3)" pk
    | Some (_, payload_kind) -> Pbrt.Decoder.skip d payload_kind
  done;
  ({
    name = v.name;
    stores = v.stores;
    subsidiaries = v.subsidiaries;
  } : company)
