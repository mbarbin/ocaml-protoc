
(** Code for file_server.proto *)

(* generated from "file_server.proto", do not edit *)



(** {2 Types} *)

type file_chunk = {
  path : string;
  data : bytes;
  crc : int32;
}

type file_path = {
  path : string;
}

type file_crc = {
  crc : int32;
}

type empty = unit

type ping = unit

type pong = unit


(** {2 Basic values} *)

val default_file_chunk : 
  ?path:string ->
  ?data:bytes ->
  ?crc:int32 ->
  unit ->
  file_chunk
(** [default_file_chunk ()] is the default value for type [file_chunk] *)

val default_file_path : 
  ?path:string ->
  unit ->
  file_path
(** [default_file_path ()] is the default value for type [file_path] *)

val default_file_crc : 
  ?crc:int32 ->
  unit ->
  file_crc
(** [default_file_crc ()] is the default value for type [file_crc] *)

val default_empty : unit
(** [default_empty ()] is the default value for type [empty] *)

val default_ping : unit
(** [default_ping ()] is the default value for type [ping] *)

val default_pong : unit
(** [default_pong ()] is the default value for type [pong] *)


(** {2 Formatters} *)

val pp_file_chunk : Format.formatter -> file_chunk -> unit 
(** [pp_file_chunk v] formats v *)

val pp_file_path : Format.formatter -> file_path -> unit 
(** [pp_file_path v] formats v *)

val pp_file_crc : Format.formatter -> file_crc -> unit 
(** [pp_file_crc v] formats v *)

val pp_empty : Format.formatter -> empty -> unit 
(** [pp_empty v] formats v *)

val pp_ping : Format.formatter -> ping -> unit 
(** [pp_ping v] formats v *)

val pp_pong : Format.formatter -> pong -> unit 
(** [pp_pong v] formats v *)


(** {2 Protobuf Encoding} *)

val encode_pb_file_chunk : file_chunk -> Pbrt.Encoder.t -> unit
(** [encode_pb_file_chunk v encoder] encodes [v] with the given [encoder] *)

val encode_pb_file_path : file_path -> Pbrt.Encoder.t -> unit
(** [encode_pb_file_path v encoder] encodes [v] with the given [encoder] *)

val encode_pb_file_crc : file_crc -> Pbrt.Encoder.t -> unit
(** [encode_pb_file_crc v encoder] encodes [v] with the given [encoder] *)

val encode_pb_empty : empty -> Pbrt.Encoder.t -> unit
(** [encode_pb_empty v encoder] encodes [v] with the given [encoder] *)

val encode_pb_ping : ping -> Pbrt.Encoder.t -> unit
(** [encode_pb_ping v encoder] encodes [v] with the given [encoder] *)

val encode_pb_pong : pong -> Pbrt.Encoder.t -> unit
(** [encode_pb_pong v encoder] encodes [v] with the given [encoder] *)


(** {2 Protobuf Decoding} *)

val decode_pb_file_chunk : Pbrt.Decoder.t -> file_chunk
(** [decode_pb_file_chunk decoder] decodes a [file_chunk] binary value from [decoder] *)

val decode_pb_file_path : Pbrt.Decoder.t -> file_path
(** [decode_pb_file_path decoder] decodes a [file_path] binary value from [decoder] *)

val decode_pb_file_crc : Pbrt.Decoder.t -> file_crc
(** [decode_pb_file_crc decoder] decodes a [file_crc] binary value from [decoder] *)

val decode_pb_empty : Pbrt.Decoder.t -> empty
(** [decode_pb_empty decoder] decodes a [empty] binary value from [decoder] *)

val decode_pb_ping : Pbrt.Decoder.t -> ping
(** [decode_pb_ping decoder] decodes a [ping] binary value from [decoder] *)

val decode_pb_pong : Pbrt.Decoder.t -> pong
(** [decode_pb_pong decoder] decodes a [pong] binary value from [decoder] *)


(** {2 Protobuf YoJson Encoding} *)

val encode_json_file_chunk : file_chunk -> Yojson.Basic.t
(** [encode_json_file_chunk v encoder] encodes [v] to to json *)

val encode_json_file_path : file_path -> Yojson.Basic.t
(** [encode_json_file_path v encoder] encodes [v] to to json *)

val encode_json_file_crc : file_crc -> Yojson.Basic.t
(** [encode_json_file_crc v encoder] encodes [v] to to json *)

val encode_json_empty : empty -> Yojson.Basic.t
(** [encode_json_empty v encoder] encodes [v] to to json *)

val encode_json_ping : ping -> Yojson.Basic.t
(** [encode_json_ping v encoder] encodes [v] to to json *)

val encode_json_pong : pong -> Yojson.Basic.t
(** [encode_json_pong v encoder] encodes [v] to to json *)


(** {2 JSON Decoding} *)

val decode_json_file_chunk : Yojson.Basic.t -> file_chunk
(** [decode_json_file_chunk decoder] decodes a [file_chunk] value from [decoder] *)

val decode_json_file_path : Yojson.Basic.t -> file_path
(** [decode_json_file_path decoder] decodes a [file_path] value from [decoder] *)

val decode_json_file_crc : Yojson.Basic.t -> file_crc
(** [decode_json_file_crc decoder] decodes a [file_crc] value from [decoder] *)

val decode_json_empty : Yojson.Basic.t -> empty
(** [decode_json_empty decoder] decodes a [empty] value from [decoder] *)

val decode_json_ping : Yojson.Basic.t -> ping
(** [decode_json_ping decoder] decodes a [ping] value from [decoder] *)

val decode_json_pong : Yojson.Basic.t -> pong
(** [decode_json_pong decoder] decodes a [pong] value from [decoder] *)


(** {2 Services} *)

(** FileServer service *)
module FileServer : sig
  open Pbrt_services
  open Pbrt_services.Value_mode
  
  module Client : sig
    
    val touch_file : (file_path, unary, empty, unary) Client.rpc
    
    val upload_file : (file_chunk, stream, file_crc, unary) Client.rpc
    
    val download_file : (file_path, unary, file_chunk, stream) Client.rpc
    
    val ping_pong : (ping, stream, pong, stream) Client.rpc
  end
  
  module Server : sig
    (** Produce a server implementation from handlers *)
    val make : 
      touch_file:((file_path, unary, empty, unary) Server.rpc -> 'handler) ->
      upload_file:((file_chunk, stream, file_crc, unary) Server.rpc -> 'handler) ->
      download_file:((file_path, unary, file_chunk, stream) Server.rpc -> 'handler) ->
      ping_pong:((ping, stream, pong, stream) Server.rpc -> 'handler) ->
      unit -> 'handler Pbrt_services.Server.t
  end
end
